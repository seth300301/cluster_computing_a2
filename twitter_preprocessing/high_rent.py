# -*- coding: utf-8 -*-
"""HighRentTweet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16TZoxCNYlDK7xgFZ_wb2iX_d-CDqe6pZ
"""



import json
import time
import ijson
import decimal
import pandas as pd

NUM_LOCATION_TWEETS = 3233512

start_time = time.time()
count = 0


# An encoder that deals with decimals
class DecimalEncoder(json.JSONEncoder):
    def default(self, i):
        if isinstance(i, decimal.Decimal):
            return str(i)
        return super(DecimalEncoder, self).default(i)


with open("location-tweets.json", 'r') as f:
    parser = ijson.items(f, 'item')
    #print(type(parser))
    twl=[]
    for i,tweet in enumerate(parser):
        doc_dict=dict(tid = tweet["id"], tokens = tweet["value"]["tokens"],tags=tweet["value"]["tags"],created_at=tweet["doc"]["data"]["created_at"],includes=tweet["doc"]["includes"],geo=tweet["doc"]["data"]["geo"],lang=tweet["doc"]["data"]["lang"],text=tweet["doc"]["data"]["text"],sentiment=tweet["doc"]["data"]["sentiment"]) 
        twl.append(doc_dict)


tws=pd.DataFrame(twl)       


def getcity(data):
  try:
    x=data['places'][0]['full_name']
    return x
  except:
    x=data[0]['full_name']
    return x   


def getstate(data):
    if ('Victoria' in data) or ('Melbourne' in data) or('Box Hill' in data) or ('Bendigo' in data):
      state = 'Melbourne'
      
    elif  ( 'New South Wales' in data) or ('Sydney' in data)or ('Canberra' in data):
      state = 'Sydney'
     
    elif   ('Brisbane' in data) or ('Gold Coast' in data) or ('Queensland' in data):
      state = 'Brisbane'
        
    elif   ('Adelaide' in data) or ('South Australia' in data) :
      state = 'Adelaide'
 
    elif   ('Perth' in data) or ('Western Australia' in data) :
      state = 'Perth'

    elif   ('Hobart' in data) or ('Tasmania' in data) :
      state = 'Hobart'      
  
    elif   ('Darwin' in data) or ('Northern Territory' in data) :
      state = 'Darwin'
    else:
      state ='notAus'

    return state    


tws['city']=tws['includes'].apply(lambda x: getcity(x))
tws['state']=tws['city'].apply(lambda x: getstate(x))

tws['keywords'] = tws['tokens'].apply(lambda x: x.replace('|',', ') )
tws_filter= tws[(tws['lang']=='en') & (tws['keywords'].str.len() !=0)]

rent_word_list = [
    'expensive',
    'high-priced',
    'costly',
    'pricey',
    'exorbitant',
    'premium',
    'luxurious',
    'lavish',
    'posh',
    'upmarket',
    'exclusive',
    'fancy',
    'luxury',
    'top-tier',
    'sky-high',
    'steep',
    'overpriced',
    'costly',
    'unaffordable',
    'astronomical',
    'hefty'
]

word_list = [
    "upscale",
    "high-end",
    "penthouse",
    "mansion",
    "estate",
    "villa",
    "apartment",
    "condominium",
    "townhouse",
    "brownstone",
    "loft",
    "studio",
    "skyscraper",
    "residence",
    "residential",
    "rental",
    'rent',
    'renting',
    'landlord',
    "lease",
    "monthly",
    "apartment",
    "2b1b",
    "high-cost",
    "lavish",
    "opulent",
    "unfurnished",
    "grand",
    "sumptuous",
    "extravagant",
    "furnished",
    "amenities",
    "1b1b",
    "doorman",
    "2b2b",
    "parking",
    "balcony",
    "terrace",
    "patio",
    "neighborhood",
    "house",
    "high-rise",
    "upmarket",
    "cosmopolitan",
    "metropolitan"
]
rword=list(set(rent_word_list + word_list))

res=tws_filter[tws_filter['keywords'].str.contains(rwords,case=False)]

res['created_at'] = res['created_at'].astype(str)
# Convert DataFrame to a list of dictionaries
docs = res.to_dict(orient='records')

# Create a dictionary to hold the "docs" field
data = {"docs": docs}

# Save the dictionary as JSON file
with open('suburbresrealdb.json', 'w') as file:
    json.dump(data, file, indent=4)

state_index = ['South Australia', 'Queensland', 'Tasmania','Victoria','Western Australia','New South Wales']

rent_state=[300,365,290,370,340,420]
rent_state2019=[305,380,380,420,310,525]

rent=pd.DataFrame({"state":state_index,"year":[2019]*6,"rent":rent_state2019})
rent2=pd.DataFrame({"state":state_index,"year":[2021]*6,"rent":rent_state})
rent=rent.append(rent2,ignore_index=True)

docs = rent.to_dict(orient='records')


# Create a dictionary to hold the "docs" field
data = {"docs": docs}


# Save the dictionary as JSON file
with open('rentsudodb.json', 'w') as file:
    json.dump(data, file, indent=4)